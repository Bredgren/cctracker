// Code generated by go-bindata.
// sources:
// ../static/css/style.css
// ../tmpl/index.tmpl
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticCssStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x92\xdf\x8a\xeb\x20\x10\xc6\xaf\x4f\xa1\xef\x30\x70\x38\xd0\x42\x2c\x49\xd3\x94\x53\xfb\x34\x26\x1a\x23\x6b\x1c\x31\x76\xdb\xb2\xec\xbb\xaf\x9a\x86\xfe\x5d\xf6\x66\x2f\xe6\x66\xbe\x8f\xf1\x37\xe3\x57\x23\x3f\xc3\xc7\x7c\xf6\xa7\x66\xcd\x9b\x74\x78\x30\x9c\x82\x93\xf5\x62\x5d\x65\x10\xab\xac\x96\xfb\x20\x37\xa8\xd1\x5d\x94\x32\x4a\x9b\x5d\xd4\x93\x08\xd0\xa2\xf1\xa4\x65\xbd\xd2\x67\x0a\x3d\x1a\x1c\x2c\x6b\x44\x90\x3e\xe7\xb3\xf9\xec\x6f\x27\x18\x17\x2e\x3d\xe3\xc5\xc9\x13\xa6\x95\x34\x14\x1a\x61\xbc\x70\x71\x7a\x8d\x2e\x18\x28\x14\xf6\x04\x03\x6a\xc5\xa1\xd6\x81\xe7\x2a\x11\xc7\xb8\x3a\x0c\xc1\x51\xd9\xd3\xfe\x01\x57\x2b\x23\x98\x23\x32\x7a\xc2\xc8\x45\x84\x2c\xb7\x01\x3d\x54\xb5\x5d\x66\x89\xba\x28\x33\x48\xb5\x5b\xa6\x85\xf0\x5d\xb8\x56\xe3\x91\x42\xa7\x38\x17\x66\x82\x5d\xc5\xa9\x96\x5c\x91\x01\xbe\xa7\x9b\xb4\x47\x3c\x00\xcb\x38\x57\x46\x52\xc8\xa1\xc8\x47\xe4\x9e\x39\xa9\x0c\xf1\x68\x7f\x6f\x8d\x5b\x64\xad\x06\x3f\x7e\xe5\x8f\xd7\x4c\x0c\x06\x8d\xb8\xe9\xd5\xe8\x3d\xf6\xc4\x29\xd9\xf9\xe7\x73\xdf\x79\xb4\x68\x9f\x2d\xb7\xeb\x91\xa9\x79\x39\xc3\xdd\xd2\x23\xb3\x75\x28\x9d\x18\x86\x57\xe1\x63\x8b\x62\x9d\x87\x78\xe5\x9b\x94\xb1\x0c\xf2\x55\x31\xc6\xb0\x13\x11\x8f\xbe\xbc\x29\x99\x9a\x47\xc5\x7d\x47\x61\xfd\xff\xdf\xf8\xda\x57\x00\x00\x00\xff\xff\x98\x01\x0e\xac\xe4\x02\x00\x00")

func staticCssStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_staticCssStyleCss,
		"static/css/style.css",
	)
}

func staticCssStyleCss() (*asset, error) {
	bytes, err := staticCssStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/css/style.css", size: 740, mode: os.FileMode(438), modTime: time.Unix(1461509964, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplIndexTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x92\x3f\x6f\xb3\x30\x10\xc6\xe7\xbc\xd2\xfb\x1d\x5c\xa6\x76\x08\x28\x99\x3a\x18\x86\xa6\x51\x3b\xb5\x51\x95\xa5\xa3\x6b\x5f\xc0\x8a\xb1\x91\x7d\x89\x12\x59\x7c\xf7\x9a\xbf\x05\x25\x93\x1f\xee\xb9\x7b\xee\x07\x86\x3e\xbc\x7e\x6e\xf6\xdf\xbb\x2d\x29\xb0\x54\xd9\xff\x7f\xb4\x3f\x17\xb4\x00\x26\x1a\xb1\xa0\x25\x20\x23\xbc\x60\xd6\x01\xa6\xd1\x09\x0f\xcb\xe7\xa8\x73\x50\xa2\x82\x6c\x63\xf4\x59\x72\x24\xe1\x14\x12\xa5\xd1\x52\xe7\x64\x6f\x19\x3f\x82\xa5\x49\xd7\xd3\xb6\x2b\xa9\x8f\xa4\xb0\x70\x48\xa3\xc4\x21\x43\xc9\x13\xee\x5c\x90\x57\x05\x71\x50\x11\xb1\xa0\xd2\xa8\x7d\x76\x05\x00\xb6\x6b\x68\x32\xa0\xd0\x1f\x23\xae\x5d\x94\x90\x67\x22\x45\x1a\x35\x16\xd8\x0e\x27\x30\xaf\xb2\xf7\xb6\x10\x66\x56\x7d\xad\xe9\xe4\x8a\x39\x97\x46\x95\x35\xb9\x85\xb0\x27\xa3\x49\x28\x77\x49\x7f\x6a\xc8\xe4\x46\x23\x68\xec\x43\xbd\xb7\x4c\xe7\x40\xe2\x37\x6b\x4e\x95\xab\xeb\x9b\xd8\xbc\x31\xfa\xee\x5b\x63\x39\x43\x6c\x20\xd7\x99\xf7\xf1\x07\x2b\xa1\xae\x03\xe7\x7a\x18\x1c\x41\xee\x85\x28\xe9\x70\x8c\x18\x91\xb6\x17\xb0\x5c\x3a\x18\xa8\xe6\x93\xd0\xbb\xe3\xdc\x62\xdc\x4b\x82\x7a\x01\x87\x75\x9d\x78\xff\x28\xb5\x80\x4b\x78\x41\xc3\x94\x23\xeb\xa7\xf8\x0b\xaa\x49\xe2\x84\x6b\x16\x2f\xc0\x71\x2b\xab\xe6\xc2\x67\x1b\x76\x60\x0f\xc6\x96\x4c\x73\xb8\x1f\xe2\x3d\x68\x31\x58\x13\x67\x22\x27\x2d\x63\x95\x26\xfd\xf5\x87\x8f\xd6\xfd\xa4\xbf\x01\x00\x00\xff\xff\xf6\xbc\x8d\x8d\xbe\x02\x00\x00")

func tmplIndexTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplIndexTmpl,
		"tmpl/index.tmpl",
	)
}

func tmplIndexTmpl() (*asset, error) {
	bytes, err := tmplIndexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/index.tmpl", size: 702, mode: os.FileMode(438), modTime: time.Unix(1461509323, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/css/style.css": staticCssStyleCss,
	"tmpl/index.tmpl": tmplIndexTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"style.css": &bintree{staticCssStyleCss, map[string]*bintree{}},
		}},
	}},
	"tmpl": &bintree{nil, map[string]*bintree{
		"index.tmpl": &bintree{tmplIndexTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

