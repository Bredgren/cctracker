// Code generated by go-bindata.
// sources:
// ../static/css/style.css
// ../templ/index.tmpl
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticCssStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xca\x4f\xa9\x54\xa8\xe6\xe5\xe2\x4c\x4a\x4c\xce\x4e\x2f\xca\x2f\xcd\x4b\xb1\x52\x28\x4a\x4f\xd2\x30\x34\xd0\x51\x00\x63\x53\x4d\x6b\x5e\xae\x5a\x5e\x2e\x40\x00\x00\x00\xff\xff\xbd\xa4\xcd\xdc\x2a\x00\x00\x00")

func staticCssStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_staticCssStyleCss,
		"static/css/style.css",
	)
}

func staticCssStyleCss() (*asset, error) {
	bytes, err := staticCssStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/css/style.css", size: 42, mode: os.FileMode(438), modTime: time.Unix(1461463916, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templIndexTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x34\x8e\x31\x8f\xc2\x30\x0c\x85\xe7\x9e\x74\xff\x21\x97\xfd\x2e\xeb\x0d\x6e\x97\x82\xc4\x06\x43\x17\xc6\x90\xba\xc4\xaa\x9b\x48\x89\x41\xea\xbf\x27\xa4\x65\x7a\xcf\x7e\x9f\xec\x07\x3f\x87\x73\x3f\x5c\x2f\x47\xe5\x65\xe1\xee\xfb\x0b\x76\x6d\xc0\xa3\x1d\xdf\xa6\x81\x05\xc5\x2a\xe7\x6d\xca\x28\xad\x7e\xc8\xf4\xfb\xaf\xb7\x44\x48\x18\xbb\x3e\x86\x27\x39\x51\x45\x47\x12\x8a\x81\xc2\x5d\x0d\xc9\xba\x19\x13\x98\x8d\xa9\x38\x53\x98\x95\x4f\x38\xb5\xda\x64\xb1\x42\xce\xb8\x9c\x8b\x5d\x19\xff\x8a\xd3\x2a\x21\xb7\xba\xce\xd9\x23\x4a\x7d\x03\xe6\x53\x05\x6e\x71\x5c\xeb\xa9\x13\x32\xc7\x9a\xed\xab\x02\x6d\xc5\x5f\x01\x00\x00\xff\xff\x69\xd9\x35\x0d\xd2\x00\x00\x00")

func templIndexTmplBytes() ([]byte, error) {
	return bindataRead(
		_templIndexTmpl,
		"templ/index.tmpl",
	)
}

func templIndexTmpl() (*asset, error) {
	bytes, err := templIndexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templ/index.tmpl", size: 210, mode: os.FileMode(438), modTime: time.Unix(1461463942, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/css/style.css": staticCssStyleCss,
	"templ/index.tmpl": templIndexTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"style.css": &bintree{staticCssStyleCss, map[string]*bintree{}},
		}},
	}},
	"templ": &bintree{nil, map[string]*bintree{
		"index.tmpl": &bintree{templIndexTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

