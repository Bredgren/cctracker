// Code generated by go-bindata.
// sources:
// ../static/css/style.css
// ../tmpl/index.tmpl
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticCssStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x93\xdf\x6e\xda\x30\x14\xc6\xaf\x8b\xc4\x3b\x1c\x69\x9a\x04\x52\x8c\x42\x20\xed\xea\x4a\x7b\x17\x27\x3e\x49\x8e\x66\x6c\xcb\x76\x5b\xd8\xb4\x77\x9f\xe3\x34\x85\x04\xd0\xee\x7a\xe1\x5c\xf8\xfc\xfb\x7d\x27\x9f\x2b\x23\x4f\xf0\x67\xb9\x78\xa8\x44\xfd\xab\x75\xe6\x55\x4b\x0e\xae\xad\x56\xbb\xa7\x0c\xfa\xb3\x7f\x5a\xbf\xc4\x70\x6d\x94\x71\x43\xa4\xd8\x95\x19\x14\xfb\xe7\xf8\x29\xcb\x3e\x08\xd0\x18\x1d\x58\x23\x0e\xa4\x4e\x1c\x0e\x46\x1b\x6f\x45\x8d\x31\xf4\x77\xb9\x58\x2e\xbe\x75\x28\x24\xba\x34\x26\xe0\x31\x30\xa1\xa8\xd5\x1c\x6a\xd4\x01\x5d\xdf\xbd\x32\x2e\x26\x70\xd8\xda\x23\x78\xa3\x48\x42\xa5\x22\xcf\x39\xc4\x9c\x90\xf4\xea\x63\x46\x69\x8f\x2f\x33\x5c\x45\x1a\x85\x63\x6d\x9f\x13\x5b\xae\x12\xfe\x63\xc4\x8f\xa7\x7c\x5c\x67\x89\x7a\xbb\xcb\x20\x9d\xe7\x75\x12\x64\xde\xd0\x35\xca\xbc\x73\xe8\x48\x4a\xd4\x23\xec\xa6\xef\x6a\xd9\x80\x9c\xc1\x06\x8f\xe8\x6a\xf2\xc8\xce\x22\x00\xee\xf3\x8e\xb1\x39\x30\x80\x15\x52\x92\x6e\x39\xe4\xb0\xcd\x07\x11\x07\xe1\x5a\xd2\x2c\x18\xfb\x15\xc2\x46\x25\xbc\x21\xe7\x03\xab\x3b\x52\x12\x7e\xde\x51\x08\x30\xc0\x45\xdc\x9b\x9b\x81\x8d\x75\xa6\x75\xe8\xfd\x34\x9f\x29\x6c\x02\x07\xf6\x21\x71\x3a\x79\xac\xed\x76\xc9\x0b\x91\x52\xc4\xdc\xbe\xe2\xbc\x0d\x0e\xe5\xad\xca\xcb\x69\x63\xa1\xa3\xb6\x4b\x95\xc9\x7e\x9e\x7e\x63\x6c\x16\x9b\xe0\x7c\xb7\xfb\x8b\x8e\x83\x08\x45\x3e\x0c\xb6\xff\xaf\xf3\x52\x07\x6d\x34\x5e\xdc\x55\x26\x04\x73\x60\x09\xe0\xda\x9a\x93\x9c\x5e\xdd\x55\xca\x25\x1c\x1b\x2f\x3f\x0c\x32\xb1\xc3\xc0\x3c\x11\x3f\x7b\xa8\x62\xb5\x2d\xf2\xf8\x14\xf3\x7d\x7a\x8f\x19\xe4\x9b\x22\x4f\x46\xe8\xb0\xc7\xe3\x37\xdd\x36\xfe\x9f\x87\x77\x92\xa1\xe3\x50\xfc\xf8\xfe\x39\x4d\xa2\xaf\x1d\xd9\x40\x46\xa7\x81\x92\xbc\x55\xe2\xf4\xb9\x84\x99\x9b\x44\x1d\xe8\x0d\xe1\x7e\x59\xa5\x4c\x5a\x68\xac\xfb\x17\x00\x00\xff\xff\x64\x22\x33\xf2\x6e\x04\x00\x00")

func staticCssStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_staticCssStyleCss,
		"static/css/style.css",
	)
}

func staticCssStyleCss() (*asset, error) {
	bytes, err := staticCssStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/css/style.css", size: 1134, mode: os.FileMode(438), modTime: time.Unix(1462166742, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplIndexTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x53\xc1\x6e\xdc\x20\x10\x3d\xa7\x52\xff\x81\x22\x55\x6a\x0f\x59\x2b\x9b\x4b\xd5\x62\x1f\x9a\x46\xbd\xb5\xab\x28\x97\x1e\x29\xcc\xae\xd1\x62\x58\xc1\x24\x4d\x84\xfc\xef\x05\x1b\x3b\xb8\x6b\xa9\x39\x79\xe0\xcd\x3c\xde\x7b\x18\xf6\xee\xdb\xcf\x9b\xfb\x5f\xbb\x5b\xd2\x62\xa7\x9b\xb7\x6f\x58\xfe\x5e\xb0\x16\xb8\x4c\xc5\x05\xeb\x00\x39\x11\x2d\x77\x1e\xb0\xa6\x0f\xb8\xbf\xfc\x44\x47\x04\x15\x6a\x68\x6e\xac\x79\x54\x02\x49\xfc\x4a\x85\xca\x1a\x65\x0e\xe4\xde\x71\x71\x04\xc7\xaa\xb1\x67\x68\xd7\xca\x1c\x49\xeb\x60\x5f\xd3\xca\x23\x47\x25\x2a\xe1\x7d\x2c\x9f\x35\x6c\x62\x45\x89\x03\x5d\xd3\x61\xed\x5b\x00\x1c\x8e\x61\xd5\x24\x85\xfd\xb6\xf2\x79\xa4\x92\xea\x91\x28\x59\xd3\x04\x81\x1b\xe5\x44\xcd\x57\xcd\x1d\x37\xc7\x38\x71\x95\x77\x52\x9f\xd0\xdc\xfb\x9a\x9e\x9c\x3d\x38\x88\xa7\x34\xac\x8a\xdb\x23\xcf\x4b\x35\x31\x0a\x6b\x10\x0c\x66\xca\x10\x1c\x37\x07\x20\x9b\xef\xce\x3e\x9c\x7c\xdf\x9f\xd1\x1e\x12\x90\xbb\xcf\x81\xcb\x85\xc0\x24\x71\xdb\x84\xb0\xf9\xc1\x3b\xe8\xfb\xa8\x73\x3b\x03\x6b\x4a\xc9\x10\x45\x4d\xff\x28\x89\xed\x67\x12\xc2\xc0\xb9\xcb\x30\xc9\x34\xef\xbf\x94\x96\x4a\x53\x6b\x82\xb4\xf2\x38\xcb\x99\xed\xdd\x3e\x81\x13\xca\xc3\xe4\x70\x39\x09\x19\x9d\xe7\x56\xd1\x7f\xbd\x26\xb7\xd7\x0b\xb7\xd7\x05\xb4\x46\xf0\x72\x45\x71\xea\x2b\x78\xec\xfb\x2a\x84\x0f\xca\x48\x78\x8a\x57\x60\xb9\xf6\x64\xfb\x71\x73\x07\xe9\x26\x4a\x9b\xaf\x0e\x70\x3a\xea\x7f\x19\x2e\x53\x5c\xb2\x4b\xf0\xc2\xa9\x53\xfa\xd3\x0b\xaf\x51\xf1\x0e\xdc\xde\xba\x8e\x1b\x01\x73\x8c\x4b\x9e\xc5\x22\xaa\x31\x72\x6a\x2c\x90\xa2\x2c\x5a\xe6\x5d\x56\xe5\x67\x10\x03\x1d\x1f\xeb\xdf\x00\x00\x00\xff\xff\x51\x10\x3d\x26\xc6\x03\x00\x00")

func tmplIndexTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplIndexTmpl,
		"tmpl/index.tmpl",
	)
}

func tmplIndexTmpl() (*asset, error) {
	bytes, err := tmplIndexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/index.tmpl", size: 966, mode: os.FileMode(438), modTime: time.Unix(1461523883, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/css/style.css": staticCssStyleCss,
	"tmpl/index.tmpl": tmplIndexTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"style.css": &bintree{staticCssStyleCss, map[string]*bintree{}},
		}},
	}},
	"tmpl": &bintree{nil, map[string]*bintree{
		"index.tmpl": &bintree{tmplIndexTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

